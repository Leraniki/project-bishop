package com.weyland.yutani.core.audit;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

@Service // –ì–æ–≤–æ—Ä–∏–º Spring, —á—Ç–æ —ç—Ç–æ —Å–µ—Ä–≤–∏—Å (–±–∏–Ω)
@Slf4j
// üî• –ú–ê–ì–ò–Ø: –≠—Ç–æ—Ç –±–∏–Ω –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –¢–û–õ–¨–ö–û –ï–°–õ–ò –≤ application.properties –µ—Å—Ç—å —Å–≤–æ–π—Å—Ç–≤–æ
// 'weyland.audit.mode' —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 'kafka'
@ConditionalOnProperty(name = "weyland.audit.mode", havingValue = "kafka")
public class KafkaAuditService implements AuditService {

    // –í–Ω–µ–¥—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç Spring –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Kafka
    private final KafkaTemplate<String, String> kafkaTemplate;

    // –í–Ω–µ–¥—Ä—è–µ–º –∏–º—è —Ç–æ–ø–∏–∫–∞ –∏–∑ application.properties (–Ω–∞–ø—Ä–∏–º–µ—Ä, weyland.audit.kafka-topic=audit-logs)
    @Value("${weyland.audit.kafka-topic:default-audit-topic}")
    private String auditTopic;

    public KafkaAuditService(KafkaTemplate<String, String> kafkaTemplate) {
        this.kafkaTemplate = kafkaTemplate;
    }

    @Override
    public void log(String message) {
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Kafka
            kafkaTemplate.send(auditTopic, message);
        } catch (Exception e) {
            // –ï—Å–ª–∏ Kafka –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ —É—Ä–æ–Ω–∏—Ç—å –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—É–¥–∏—Ç–∞ –≤ Kafka: {}", e.getMessage());
        }
    }
}